<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>강의 보기</title>
<style type="text/css">

.dataRow {
	display: flex;
	margin: 3%;
}

#left {
	flex: 4px;
}

#center {
	flex: 6px;
	text-align: center;
}

#right {
	flex: 2px;
	text-align: right;
}

</style>
<script type="text/javascript" src="/js/courseView.js"></script>


</head>
<body>
	<div class="card shadow md-4">
		<!-- no, title, content, writeDate, startDate, endDate, updateDate, vid, image, price, cbno, teacher -->
		<div class="card-body">
			<div class="col-md-12">
				<div class="dataRow">
					<!-- 1(좌) -->
					<div id="left" class="col-md-4">
						<div class="row" hidden="hidden">
							<div>${vo.no }</div>
						</div>
						<div class="row">
							<div><img src="${vo.image }"></div>
						</div>
						<div class="row">
							<div>강의명 : ${vo.title }</div>
						</div>
						<div class="row">
							<div>담당자 : ${vo.name }</div>
						</div>
						<div class="row">
							<div>
								기간 :
								<fmt:formatDate value="${vo.startDate }" pattern="yyyy-MM-dd" />
								~
								<fmt:formatDate value="${vo.endDate }" pattern="yyyy-MM-dd" />
							</div>
						</div>
						<div class="row">
							<div>
								등록일 :
								<fmt:formatDate value="${vo.writeDate }" pattern="yyyy-MM-dd" />
							</div>
						</div>
						<div class="row">
							<div>
								수정일 :
								<fmt:formatDate value="${vo.updateDate }" pattern="yyyy-MM-dd" />
							</div>
						</div>
						<div class="row">
							<div>수강평 :</div>
						</div>
					</div>

					<!-- 2(가운데) -->
					<div id="center" class="col-md-6">
						<div class="row">
							<div>${vo.vid }</div>
						</div>
						<div class="row">
							<div class="iframe_container" id="player">
							
							</div>
						</div>
						<div class="row">
						 	시청시간 : <span id="time"></span>초
						</div>
						<div class="row">
							${vo.content }
						</div>
					</div>

					<!-- 3(우) -->
					<div id="right" class="col-md-2">
						<div class="row">
							<div><img src="${vo.image }" class="img-thumbnail"></div>
						</div>
						<br/>
						<div class="row" align="center">
							<div style="margin:4px;"><fmt:formatNumber value="${vo.price }" pattern="#,###"/>원</div>
							<div align="right"">
								<button type="button" class="btn btn-outline-success btn-sm" style="margin:2px;">수강신청</button>
								<button type="button" class="btn btn-outline-success btn-sm" style="margin:2px;">찜</button>
							</div>
						</div>
						<br/>
						<br/>
						<div class="row">
							<div><img src="${vo.fileName }" class="img-thumbnail"></div>
						</div>
					</div>
				</div>
				<br />
				<div class="row">
					<div class="col-md-12" style="padding: 10px;">
						<a
							href="update.do?no=${vo.no }&page=${param.page}&perPageNum=${param.perPageNum}&key=${param.key}&word=${param.word}"
							class="btn btn-dark">수정</a> <a
							href="delete.do?no=${vo.no }&perPageNum=${param.perPageNum}"
							class="btn btn-dark">삭제</a>
					</div>
				</div>
			</div>
		</div>
	</div>
	
	
	
	<script type="text/javascript">
	// pno(강의결제) 가 있으면 유튜브 동영상 가져오기
	<c:if test="${pno != 0  }">
	var pno = ${pno};

    // 2. This code loads the IFrame Player API code asynchronously.
    var tag = document.createElement('script');

    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    // 3. This function creates an <iframe> (and YouTube player)
    //    after the API code downloads.
    var player;
    var watchTime = 0; // 누적 시청 시간을 저장할 변수
    
    function onYouTubeIframeAPIReady() {
    	  var playerContainer = document.getElementById('player');
    	  var containerWidth = playerContainer.offsetWidth;
    	  var containerHeight = containerWidth * 0.5625; // 16:9 비율로 계산 (640x360)
    	  
      player = new YT.Player('player', {
   		height: containerHeight,
   	    width: containerWidth,
        videoId: 'M7lc1UVf-VE', // 유튜브 아이디 - db에 저장
        events: {
          'onStateChange': onPlayerStateChange
        }
      });
    }

    // 5. The API calls this function when the player's state changes.
    //    The function indicates that when playing a video (state=1),
    //    the player should play for six seconds and then stop.
    var done = false;
    
    var startTime, endTime;

    function onPlayerStateChange(event) { // 플레이어 상태변경
  	  if (event.data == YT.PlayerState.PLAYING && !done) { // 플레이어 시작
  	    startTime = new Date().getTime();
  	    done = true;
  	    
  	  } else if (event.data == YT.PlayerState.PAUSED && done) { // 플레이어 일시정지
  	    endTime = new Date().getTime();
  	    var duration = (endTime - startTime) / 1000; // 단위: 초
  	    console.log("//동영상 시청 시간:", duration, "초");
  	    watchTime += duration; // 누적 시청 시간 더하기
  	    done = false;
          console.log("누적 시청 시간:", watchTime, "초"); // 누적 시청 시간 출력
  	    document.getElementById("time").innerHTML = Math.floor(watchTime);

  	    
  	  } else if (event.data == YT.PlayerState.ENDED && done) { // 플레이어 종료
  	    endTime = new Date().getTime();
  	    var duration = (endTime - startTime) / 1000; // 단위: 초
  	    console.log("/동영상 시청 시간:", duration, "초");
  	    watchTime += duration; // 누적 시청 시간 더하기
  	    done = false;
          console.log("누적 시청 시간:", watchTime, "초"); // 누적 시청 시간 출력
  	    document.getElementById("time").innerHTML = Math.floor(watchTime);
	    
  	  }
  	}
    
    function stopVideo() {
      player.pauseVideo();
    }

    window.addEventListener('beforeunload', function() { // 페이지 unload되기 전 실행
        // 일시정지 한 적 없으면 시간 계산
        if (player.getPlayerState() !== YT.PlayerState.PAUSED && done) {
            endTime = new Date().getTime();
            var duration = (endTime - startTime) / 1000; // 단위: 초
            console.log("/동영상 시청 시간:", duration, "초");
            watchTime += duration; // 누적 시청 시간 더하기
            done = false;
            console.log("누적 시청 시간:", watchTime, "초"); // 누적 시청 시간 출력
            document.getElementById("time").innerHTML = Math.floor(watchTime);
        }

        // 시청 시간 업데이트
        endView.update({ pno: pno, viewTime: Math.floor(watchTime) }, function(result) {
            console.log(result);
        });
    });

	</c:if>
    
	</script>
</body>
</html>